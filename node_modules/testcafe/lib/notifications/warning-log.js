"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const render_template_1 = __importDefault(require("../utils/render-template"));
const message_bus_1 = __importDefault(require("../utils/message-bus"));
class WarningLog {
    constructor(globalLog = null, callback) {
        this.globalLog = globalLog;
        this.messages = [];
        this.callback = callback;
    }
    addPlainMessage(msg) {
        // NOTE: avoid duplicates
        if (!this.messages.includes(msg))
            this.messages.push(msg);
    }
    addWarning(...args) {
        // @ts-ignore
        const msg = render_template_1.default.apply(null, args);
        this.addPlainMessage(msg);
        if (this.globalLog)
            this.globalLog.addPlainMessage(msg);
        if (this.callback)
            this.callback(msg);
    }
    clear() {
        this.messages = [];
    }
    copyTo(warningLog) {
        this.messages.forEach(msg => warningLog.addWarning(msg));
    }
    static createAddWarningCallback(messageBus, testRun) {
        return async (message) => {
            if (messageBus && messageBus instanceof message_bus_1.default) {
                await messageBus.emit('warning-add', {
                    message,
                    testRun,
                });
            }
        };
    }
}
exports.default = WarningLog;
module.exports = exports.default;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2FybmluZy1sb2cuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvbm90aWZpY2F0aW9ucy93YXJuaW5nLWxvZy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLCtFQUFzRDtBQUV0RCx1RUFBOEM7QUFFOUMsTUFBcUIsVUFBVTtJQUszQixZQUFvQixZQUErQixJQUFJLEVBQUUsUUFBNkM7UUFDbEcsSUFBSSxDQUFDLFNBQVMsR0FBRyxTQUFTLENBQUM7UUFDM0IsSUFBSSxDQUFDLFFBQVEsR0FBSSxFQUFFLENBQUM7UUFDcEIsSUFBSSxDQUFDLFFBQVEsR0FBSSxRQUFRLENBQUM7SUFDOUIsQ0FBQztJQUVNLGVBQWUsQ0FBRSxHQUFXO1FBQy9CLHlCQUF5QjtRQUN6QixJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDO1lBQzVCLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQ2hDLENBQUM7SUFFTSxVQUFVLENBQUUsR0FBRyxJQUFXO1FBQzdCLGFBQWE7UUFDYixNQUFNLEdBQUcsR0FBRyx5QkFBYyxDQUFDLEtBQUssQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLENBQUM7UUFFN0MsSUFBSSxDQUFDLGVBQWUsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUUxQixJQUFJLElBQUksQ0FBQyxTQUFTO1lBQ2QsSUFBSSxDQUFDLFNBQVMsQ0FBQyxlQUFlLENBQUMsR0FBRyxDQUFDLENBQUM7UUFFeEMsSUFBSSxJQUFJLENBQUMsUUFBUTtZQUNiLElBQUksQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDM0IsQ0FBQztJQUVNLEtBQUs7UUFDUixJQUFJLENBQUMsUUFBUSxHQUFHLEVBQUUsQ0FBQztJQUN2QixDQUFDO0lBRU0sTUFBTSxDQUFFLFVBQXNCO1FBQ2pDLElBQUksQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsVUFBVSxDQUFDLFVBQVUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO0lBQzdELENBQUM7SUFFTSxNQUFNLENBQUMsd0JBQXdCLENBQUUsVUFBZ0MsRUFBRSxPQUFpQjtRQUN2RixPQUFPLEtBQUssRUFBRSxPQUFlLEVBQUUsRUFBRTtZQUM3QixJQUFJLFVBQVUsSUFBSSxVQUFVLFlBQVkscUJBQVUsRUFBRTtnQkFDaEQsTUFBTSxVQUFVLENBQUMsSUFBSSxDQUFDLGFBQWEsRUFBRTtvQkFDakMsT0FBTztvQkFDUCxPQUFPO2lCQUNWLENBQUMsQ0FBQzthQUNOO1FBQ0wsQ0FBQyxDQUFDO0lBQ04sQ0FBQztDQUNKO0FBaERELDZCQWdEQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCByZW5kZXJUZW1wbGF0ZSBmcm9tICcuLi91dGlscy9yZW5kZXItdGVtcGxhdGUnO1xuaW1wb3J0IFRlc3RSdW4gZnJvbSAnLi4vdGVzdC1ydW4nO1xuaW1wb3J0IE1lc3NhZ2VCdXMgZnJvbSAnLi4vdXRpbHMvbWVzc2FnZS1idXMnO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBXYXJuaW5nTG9nIHtcbiAgICBwdWJsaWMgbWVzc2FnZXM6IHN0cmluZ1tdO1xuICAgIHB1YmxpYyBnbG9iYWxMb2c6IFdhcm5pbmdMb2cgfCBudWxsO1xuICAgIHB1YmxpYyBjYWxsYmFjaz86IChtZXNzYWdlOiBzdHJpbmcpID0+IFByb21pc2U8dm9pZD47XG5cbiAgICBwdWJsaWMgY29uc3RydWN0b3IgKGdsb2JhbExvZzogV2FybmluZ0xvZyB8IG51bGwgPSBudWxsLCBjYWxsYmFjaz86IChtZXNzYWdlOiBzdHJpbmcpID0+IFByb21pc2U8dm9pZD4pIHtcbiAgICAgICAgdGhpcy5nbG9iYWxMb2cgPSBnbG9iYWxMb2c7XG4gICAgICAgIHRoaXMubWVzc2FnZXMgID0gW107XG4gICAgICAgIHRoaXMuY2FsbGJhY2sgID0gY2FsbGJhY2s7XG4gICAgfVxuXG4gICAgcHVibGljIGFkZFBsYWluTWVzc2FnZSAobXNnOiBzdHJpbmcpOiB2b2lkIHtcbiAgICAgICAgLy8gTk9URTogYXZvaWQgZHVwbGljYXRlc1xuICAgICAgICBpZiAoIXRoaXMubWVzc2FnZXMuaW5jbHVkZXMobXNnKSlcbiAgICAgICAgICAgIHRoaXMubWVzc2FnZXMucHVzaChtc2cpO1xuICAgIH1cblxuICAgIHB1YmxpYyBhZGRXYXJuaW5nICguLi5hcmdzOiBhbnlbXSk6IHZvaWQge1xuICAgICAgICAvLyBAdHMtaWdub3JlXG4gICAgICAgIGNvbnN0IG1zZyA9IHJlbmRlclRlbXBsYXRlLmFwcGx5KG51bGwsIGFyZ3MpO1xuXG4gICAgICAgIHRoaXMuYWRkUGxhaW5NZXNzYWdlKG1zZyk7XG5cbiAgICAgICAgaWYgKHRoaXMuZ2xvYmFsTG9nKVxuICAgICAgICAgICAgdGhpcy5nbG9iYWxMb2cuYWRkUGxhaW5NZXNzYWdlKG1zZyk7XG5cbiAgICAgICAgaWYgKHRoaXMuY2FsbGJhY2spXG4gICAgICAgICAgICB0aGlzLmNhbGxiYWNrKG1zZyk7XG4gICAgfVxuXG4gICAgcHVibGljIGNsZWFyICgpOiB2b2lkIHtcbiAgICAgICAgdGhpcy5tZXNzYWdlcyA9IFtdO1xuICAgIH1cblxuICAgIHB1YmxpYyBjb3B5VG8gKHdhcm5pbmdMb2c6IFdhcm5pbmdMb2cpOiB2b2lkIHtcbiAgICAgICAgdGhpcy5tZXNzYWdlcy5mb3JFYWNoKG1zZyA9PiB3YXJuaW5nTG9nLmFkZFdhcm5pbmcobXNnKSk7XG4gICAgfVxuXG4gICAgcHVibGljIHN0YXRpYyBjcmVhdGVBZGRXYXJuaW5nQ2FsbGJhY2sgKG1lc3NhZ2VCdXM/OiBNZXNzYWdlQnVzIHwgb2JqZWN0LCB0ZXN0UnVuPzogVGVzdFJ1bik6IChtZXNzYWdlOiBzdHJpbmcpID0+IFByb21pc2U8dm9pZD4ge1xuICAgICAgICByZXR1cm4gYXN5bmMgKG1lc3NhZ2U6IHN0cmluZykgPT4ge1xuICAgICAgICAgICAgaWYgKG1lc3NhZ2VCdXMgJiYgbWVzc2FnZUJ1cyBpbnN0YW5jZW9mIE1lc3NhZ2VCdXMpIHtcbiAgICAgICAgICAgICAgICBhd2FpdCBtZXNzYWdlQnVzLmVtaXQoJ3dhcm5pbmctYWRkJywge1xuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLFxuICAgICAgICAgICAgICAgICAgICB0ZXN0UnVuLFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgIH1cbn1cbiJdfQ==