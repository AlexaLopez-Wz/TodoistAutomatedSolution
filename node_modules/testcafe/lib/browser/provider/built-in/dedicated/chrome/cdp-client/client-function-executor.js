"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const SharedErrors = __importStar(require("../../../../../../shared/errors"));
const EXECUTION_CTX_WAS_DESTROYED_CODE = -32000;
const SELECTOR_MAX_EXECUTE_COUNT = 10;
const PROXYLESS_SCRIPT = 'window["%proxyless%"]';
class ClientFunctionExecutor {
    constructor() {
        // new Map<frameId, executionContextId>
        this._frameExecutionContexts = new Map();
        this._currentFrameId = '';
    }
    async evaluateScript(Runtime, expression) {
        const script = { expression, awaitPromise: true };
        if (this._currentFrameId && this._frameExecutionContexts.has(this._currentFrameId))
            script.contextId = this._frameExecutionContexts.get(this._currentFrameId);
        try {
            const { result, exceptionDetails = null } = await Runtime.evaluate(script);
            return { result, exceptionDetails, error: null };
        }
        catch (error) {
            return { result: null, exceptionDetails: null, error };
        }
    }
    async _evaluateScriptWithReloadPageIgnore(Runtime, expression) {
        let attempts = 0;
        let result;
        let exceptionDetails;
        let error;
        while (attempts++ < SELECTOR_MAX_EXECUTE_COUNT) {
            ({ result, exceptionDetails, error } = await this.evaluateScript(Runtime, expression));
            if (error && error.response.code === EXECUTION_CTX_WAS_DESTROYED_CODE)
                continue;
            break;
        }
        // eslint-disable-next-line @typescript-eslint/no-object-literal-type-assertion
        return { result, exceptionDetails, error };
    }
    static _getPropertyByName(properties, name) {
        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
        return properties.find(prop => prop.name === name).value;
    }
    static _throwException(details, command, callsite) {
        var _a;
        const exception = details.exception;
        if (exception) {
            const className = exception.className;
            const properties = (_a = exception.preview) === null || _a === void 0 ? void 0 : _a.properties;
            if (className === SharedErrors.UncaughtErrorInCustomDOMPropertyCode.name) {
                throw new SharedErrors.UncaughtErrorInCustomDOMPropertyCode(command.instantiationCallsiteName, ClientFunctionExecutor._getPropertyByName(properties, 'errMsg'), ClientFunctionExecutor._getPropertyByName(properties, 'property'), callsite);
            }
            else if (className === SharedErrors.CannotObtainInfoForElementSpecifiedBySelectorError.name) {
                throw new SharedErrors.CannotObtainInfoForElementSpecifiedBySelectorError(callsite, {
                    apiFnChain: command.apiFnChain,
                    apiFnIndex: parseInt(ClientFunctionExecutor._getPropertyByName(properties, 'apiFnIndex'), 10),
                });
            }
            else if (className === SharedErrors.ActionElementNotFoundError.name) {
                throw new SharedErrors.ActionElementNotFoundError(callsite, {
                    apiFnChain: command.apiFnChain,
                    apiFnIndex: parseInt(ClientFunctionExecutor._getPropertyByName(properties, 'apiFnIndex'), 10),
                });
            }
            else if (className === SharedErrors.DomNodeClientFunctionResultError.name)
                throw new SharedErrors.DomNodeClientFunctionResultError(command.instantiationCallsiteName, callsite);
            else if (className === SharedErrors.InvalidSelectorResultError.name)
                throw new SharedErrors.InvalidSelectorResultError(callsite);
            else if (className === SharedErrors.ActionElementIsInvisibleError.name)
                throw new SharedErrors.ActionElementIsInvisibleError(callsite);
        }
        throw new SharedErrors.UncaughtErrorInClientFunctionCode(command.instantiationCallsiteName, details.text, callsite);
    }
    async executeClientFunction(Runtime, command, callsite) {
        const expression = `${PROXYLESS_SCRIPT}.executeClientFunctionCommand(${JSON.stringify(command)});`;
        const { result, exceptionDetails, error } = await this.evaluateScript(Runtime, expression);
        if (error) {
            if (error.response.code === EXECUTION_CTX_WAS_DESTROYED_CODE)
                throw new SharedErrors.ClientFunctionExecutionInterruptionError(command.instantiationCallsiteName, callsite);
            throw error;
        }
        if (exceptionDetails)
            ClientFunctionExecutor._throwException(exceptionDetails, command, callsite);
        return JSON.parse(result.value); // eslint-disable-line @typescript-eslint/no-non-null-assertion
    }
    async executeSelector(args) {
        const { Runtime, command, callsite, selectorTimeout, errTypes } = args;
        const returnNodeObjId = 'DOM' in args;
        const expression = `${PROXYLESS_SCRIPT}.executeSelectorCommand(${JSON.stringify(command)}, ${selectorTimeout}, ${Date.now()},
                                 ${returnNodeObjId}, ${JSON.stringify(errTypes)});`;
        const { result, exceptionDetails, error } = await this._evaluateScriptWithReloadPageIgnore(Runtime, expression);
        if (error)
            throw error;
        if (exceptionDetails)
            ClientFunctionExecutor._throwException(exceptionDetails, command, callsite);
        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
        return returnNodeObjId ? result.objectId : JSON.parse(result.value);
    }
    async getNode(args) {
        const objectId = await this.executeSelector(args);
        const response = await args.DOM.describeNode({ objectId });
        return response.node;
    }
    setupFramesWatching(Runtime) {
        Runtime.on('executionContextCreated', (event) => {
            var _a;
            if (!((_a = event.context.auxData) === null || _a === void 0 ? void 0 : _a.frameId))
                return;
            this._frameExecutionContexts.set(event.context.auxData.frameId, event.context.id);
        });
        Runtime.on('executionContextDestroyed', (event) => {
            for (const [frameId, executionContextId] of this._frameExecutionContexts.entries()) {
                if (executionContextId === event.executionContextId)
                    this._frameExecutionContexts.delete(frameId);
            }
        });
        Runtime.on('executionContextsCleared', () => {
            this._currentFrameId = '';
            this._frameExecutionContexts.clear();
        });
    }
    setCurrentFrameId(frameId) {
        this._currentFrameId = frameId;
    }
}
exports.default = ClientFunctionExecutor;
module.exports = exports.default;
//# sourceMappingURL=data:application/json;base64,