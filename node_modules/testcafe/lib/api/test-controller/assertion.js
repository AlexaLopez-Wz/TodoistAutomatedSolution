"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const assertion_1 = require("../../test-run/commands/assertion");
const test_run_1 = require("../../errors/test-run");
class Assertion {
    constructor(actual, testController, callsite) {
        this._testController = testController;
        this._actual = actual;
        this._callsite = callsite;
    }
    then() {
        throw new test_run_1.AssertionWithoutMethodCallError(this._callsite);
    }
    _enqueueAssertion(command, assertionArgs) {
        let options = assertionArgs.opts || {};
        let message = assertionArgs.message;
        // NOTE: Assertion options should be specified after the 'message' parameter.
        // await t.expect(42).eql(43, 'wrong value', { timeout: 10000 });
        // In case of empty assertion message we allowing to specify assertion option in place of assertion message.
        // await t.expect(42).eql(43, { timeout: 10000 });
        if (typeof message === 'object') {
            options = assertionArgs.message;
            message = void 0;
        }
        return this._testController._enqueueCommand(command, {
            assertionType: command.methodName,
            actual: this._actual,
            expected: assertionArgs.expected,
            expected2: assertionArgs.expected2,
            message: message,
            options: { timeout: options.timeout, allowUnawaitedPromise: options.allowUnawaitedPromise },
        });
    }
    [assertion_1.EqlAssertionCommand.methodName](expected, message, opts) {
        return this._enqueueAssertion(assertion_1.EqlAssertionCommand, { expected, message, opts });
    }
    [assertion_1.NotEqlAssertionCommand.methodName](expected, message, opts) {
        return this._enqueueAssertion(assertion_1.NotEqlAssertionCommand, { expected, message, opts });
    }
    [assertion_1.OkAssertionCommand.methodName](message, opts) {
        return this._enqueueAssertion(assertion_1.OkAssertionCommand, { message, opts });
    }
    [assertion_1.NotOkAssertionCommand.methodName](message, opts) {
        return this._enqueueAssertion(assertion_1.NotOkAssertionCommand, { message, opts });
    }
    [assertion_1.ContainsAssertionCommand.methodName](expected, message, opts) {
        return this._enqueueAssertion(assertion_1.ContainsAssertionCommand, { expected, message, opts });
    }
    [assertion_1.NotContainsAssertionCommand.methodName](expected, message, opts) {
        return this._enqueueAssertion(assertion_1.NotContainsAssertionCommand, { expected, message, opts });
    }
    [assertion_1.TypeOfAssertionCommand.methodName](expected, message, opts) {
        return this._enqueueAssertion(assertion_1.TypeOfAssertionCommand, { expected, message, opts });
    }
    [assertion_1.NotTypeOfAssertionCommand.methodName](expected, message, opts) {
        return this._enqueueAssertion(assertion_1.NotTypeOfAssertionCommand, { expected, message, opts });
    }
    [assertion_1.GtAssertionCommand.methodName](expected, message, opts) {
        return this._enqueueAssertion(assertion_1.GtAssertionCommand, { expected, message, opts });
    }
    [assertion_1.GteAssertionCommand.methodName](expected, message, opts) {
        return this._enqueueAssertion(assertion_1.GteAssertionCommand, { expected, message, opts });
    }
    [assertion_1.LtAssertionCommand.methodName](expected, message, opts) {
        return this._enqueueAssertion(assertion_1.LtAssertionCommand, { expected, message, opts });
    }
    [assertion_1.LteAssertionCommand.methodName](expected, message, opts) {
        return this._enqueueAssertion(assertion_1.LteAssertionCommand, { expected, message, opts });
    }
    [assertion_1.WithinAssertionCommand.methodName](start, finish, message, opts) {
        // NOTE: `within` is not available in Chai `assert` interface.
        return this._enqueueAssertion(assertion_1.WithinAssertionCommand, { expected: start, expected2: finish, message, opts });
    }
    [assertion_1.NotWithinAssertionCommand.methodName](start, finish, message, opts) {
        return this._enqueueAssertion(assertion_1.NotWithinAssertionCommand, { expected: start, expected2: finish, message, opts });
    }
    [assertion_1.MatchAssertionCommand.methodName](expected, message, opts) {
        return this._enqueueAssertion(assertion_1.MatchAssertionCommand, { expected, message, opts });
    }
    [assertion_1.NotMatchAssertionCommand.methodName](expected, message, opts) {
        return this._enqueueAssertion(assertion_1.NotMatchAssertionCommand, { expected, message, opts });
    }
}
exports.default = Assertion;
module.exports = exports.default;
//# sourceMappingURL=data:application/json;base64,